// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER   // Regular user
  ADMIN  // Admin user
  VENDOR // Vendor user
}

enum Status {
  PENDING     // Pending user
  ACTIVE      // Active user
  SUSPENDED   // Suspended user
}

enum Shop_Status {
  PENDING     // Pending shop
  ACTIVE      // Active shop
  SUSPENDED   // Suspended shop
  REVIEW_PENDING // Shop under review
}

enum IsDeleted {
  TRUE        // User is deleted
  FALSE       // User is not deleted
}

model User {
  userId         String    @id @default(uuid()) @db.Uuid
  name           String
  email          String    @unique
  password       String
  role           Role      @default(USER)
  profileImgSrc     String?
  profileImgSize     Int?
  status         Status    @default(PENDING)
  phone        String?
  street       String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  isDeleted      IsDeleted @default(FALSE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  verificationCode String? @db.VarChar(6)
  otpExpiresAt   DateTime?
  otpVerified    Boolean   @default(false)
  shops          Shop[]
  payments       Payment[]
  Review         Review[]
  RecentProductView RecentProductView[]
  Order          Order[]
 
}


model Product {
  productId   String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  price       Float
  stock       Int
  category    String
  discountCode Int?
  discountPercent    Int?
  isAvailable Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ProductImg  ProductImg[]
  shopId      String      @db.Uuid
  shop        Shop        @relation(fields: [shopId], references: [shopId])
  Payment     Payment[]
  Review      Review[]
  RecentProductView RecentProductView[]


  Order Order[]
}

model ProductImg {
  imgId     String   @id @default(uuid()) @db.Uuid
  imgPath   String
  imgSize   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String @db.Uuid
  product   Product @relation(fields: [productId], references: [productId])
}

model Review {
  reviewId    String   @id @default(uuid()) @db.Uuid
  rating      Int
  reviewText  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [userId])
  productId   String   @db.Uuid
  product     Product  @relation(fields: [productId], references: [productId])
}

model Shop {
  shopId      String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  status      Shop_Status @default(PENDING)
  logoImgPath      String
  logoImgSize      Int
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String   @db.Uuid
  Owner        User      @relation(fields: [userId], references: [userId])
 
  products    Product[]


  Order Order[]
}

model Payment {
  paymentId      String    @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  productId      String  @db.Uuid
  amount         Float
  isPaid         Boolean   @default(false)
  paymentDate    DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [userId])
  product        Product   @relation(fields: [productId], references: [productId])
}



model RecentProductView {
  ViewId        String   @id @default(uuid())
  userId        String   @db.Uuid
  productId     String   @db.Uuid
  viewedAt      DateTime @default(now())
  user          User     @relation(fields: [userId], references: [userId])
  product       Product  @relation(fields: [productId], references: [productId])
}
enum OrderStatus {
  PENDING
  PROCESSING
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
}



model Order {
  orderId        String       @id @default(uuid()) @db.Uuid
  trackingId     String?    @unique
  customerId         String       @db.Uuid
  customer           User         @relation(fields: [customerId], references: [userId])
  orderDate      DateTime     @default(now())
  status         OrderStatus  @default(PENDING)
  quantity       Int
  totalAmount    Float
  discountSave Float?
  paymentMethod  String       // More consistent naming (camelCase)
  paymentStatus  String       @default("PENDING")
  
  productId      String       @db.Uuid
  product        Product      @relation(fields: [productId], references: [productId])

  shopId         String       @db.Uuid
  shop           Shop         @relation(fields: [shopId], references: [shopId])

  updatedAt      DateTime     @updatedAt
}






