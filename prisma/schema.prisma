generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Your main Heroku database URL
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Shadow database URL
}

enum Role {
  USER   // Regular user
  ADMIN  // Admin user
  VENDOR // Vendor user
}

enum Status {
  PENDING     // Pending user
  ACTIVE      // Active user
  SUSPENDED   // Suspended user
}

enum Shop_Status {
  PENDING     // Pending shop
  ACTIVE      // Active shop
  SUSPENDED   // Suspended shop
  REVIEW_PENDING // Shop under review
}

enum IsDeleted {
  TRUE        // User is deleted
  FALSE       // User is not deleted
}

model User {
  userId         String    @id @default(uuid()) @db.Uuid // Primary key with UUID
  name           String
  email          String    @unique                      // Unique email for each user
  password       String
  phone          String?   @unique                      // Unique phone number for the user
  role           Role      @default(USER)               // Role of the user (Admin, Vendor, etc.)
  profileImg     String?  // Profile image (single image)
  status         Status    @default(PENDING)            // User status (e.g., pending, active, suspended)
  isDeleted      IsDeleted @default(FALSE)              // Flag for soft deletion
  createdAt      DateTime  @default(now())              // Creation timestamp
  updatedAt      DateTime  @updatedAt                   // Auto-updated on modification
  verificationCode String? @db.VarChar(6)               // OTP verification code
  otpExpiresAt     DateTime?                           // OTP expiration time
  otpVerified      Boolean  @default(false)             // Whether the OTP is verified
  shops           Shop[]   // One-to-many relation with Shop (User can own many Shops)
  payments        Payment[] // One-to-many relation with Payment

  Review Review[]

  RecentProductView RecentProductView[]
}


model Product {
  productId   String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  price       Float
  stock       Int
  category    String
  discountCode Int?
  discountPercent    Int?
  isAvailable Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  ProductImg  ProductImg[] // Relation to ProductImg (one-to-many)

  shopId      String      @db.Uuid // Correct data type for UUID
  shop        Shop        @relation(fields: [shopId], references: [shopId]) // Relation to Shop

  Payment Payment[]

  Review Review[]

  RecentProductView RecentProductView[]
}
model ProductImg {
  imgId     String   @id @default(uuid()) @db.Uuid
  imgPath   String
  imgSize   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  productId String @db.Uuid
  product   Product @relation(fields: [productId], references: [productId])


  
}

model Review {
  reviewId    String   @id @default(uuid()) @db.Uuid
  rating      Int      // Rating given by the user (1 to 5 scale)
  reviewText  String   // Review text
  createdAt   DateTime @default(now()) // When the review was created
  updatedAt   DateTime @updatedAt // When the review was last updated

  userId      String   @db.Uuid // Foreign key for the User who wrote the review
  user        User     @relation(fields: [userId], references: [userId])

  productId   String   @db.Uuid // Foreign key for the Product being reviewed
  product     Product  @relation(fields: [productId], references: [productId])
}



model Shop {
  shopId      String    @id @default(uuid()) @db.Uuid // Primary key as UUID
  name        String
  description String
  status      Shop_Status @default(PENDING)         // Shop status (e.g., active, pending)
  isDeleted   Boolean   @default(false)              // Flag for soft deletion

  createdAt   DateTime  @default(now())              // Creation timestamp
  updatedAt   DateTime  @updatedAt                   // Auto-updated on modification

  userId      String   @db.Uuid       // Foreign key referencing User
  user        User      @relation(fields: [userId], references: [userId]) // User who owns the shop
  logo  Logo[] 
  products    Product[] // One-to-many relation with Product (A shop can have many products)

  
}
model Payment {
  paymentId      String    @id @default(uuid()) @db.Uuid // Primary key with UUID
  userId         String   @db.Uuid                     // Correct data type for UUID
  productId      String  @db.Uuid     
  amount         Float
  isPaid         Boolean   @default(false)
  paymentDate    DateTime

  createdAt      DateTime  @default(now())              // Timestamp for creation
  updatedAt      DateTime  @updatedAt                   // Automatically updated on modification

  user           User      @relation(fields: [userId], references: [userId]) // Relation to User
  product        Product   @relation(fields: [productId], references: [productId]) // Relation to Product
}
model Logo {
  logoId       String    @id @default(uuid()) @db.Uuid 
  imgPath      String
  imgSize      Int
  shopId       String @db.Uuid
  shop         Shop   @relation(fields: [shopId], references: [shopId])
}

model RecentProductView {
  ViewId        String   @id @default(uuid()) // Unique ID for each record
  userId    String          @db.Uuid
  productId  String      @db.Uuid
  viewedAt  DateTime @default(now()) // Timestamp when the product was viewed
  user      User     @relation(fields: [userId], references: [userId])
  product   Product  @relation(fields: [productId], references: [productId])
}

